{
	"info": {
		"_postman_id": "c2e14424-e50b-44eb-aa79-773a158d445b",
		"name": "User Service",
		"description": "This is simple client API\n\n\nContact Support:\n Email: schetinnikov@gmail.com",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1790176"
	},
	"item": [
		{
			"name": "Create user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": false
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"{{username1}}\",\n  \"password\": \"{{password1}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"phone\": \"{{$randomPhoneNumber}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user"
					]
				},
				"description": "This can only be done by the logged in user."
			},
			"response": []
		},
		{
			"name": "find user 1 by nickname without auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 303\", function () {",
							"  pm.response.to.have.status(303);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": false
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/user/{{username1}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"{{username1}}"
					]
				},
				"description": "Returns a user based on a single ID, if the user does not have access to the user"
			},
			"response": []
		},
		{
			"name": "update User 1 without auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 303\", function () {",
							"    pm.response.to.have.status(303);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": false
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"firstName\": \"{{$randomFirstName}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/{{username1}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"{{username1}}"
					]
				},
				"description": "Update user with User ID supplied"
			},
			"response": []
		},
		{
			"name": "auth user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.collectionVariables.set(\"refresh_token\", jsonData.refresh_token);",
							"pm.collectionVariables.set(\"access_token\", jsonData.access_token);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": false
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "{{username1}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{password1}}",
							"type": "text"
						},
						{
							"key": "client_id",
							"value": "account",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "password",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "any",
							"type": "text",
							"disabled": true
						},
						{
							"key": "scope",
							"value": "openid email profile",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{keycloakUrl}}/realms/{{realm}}/protocol/openid-connect/token",
					"host": [
						"{{keycloakUrl}}"
					],
					"path": [
						"realms",
						"{{realm}}",
						"protocol",
						"openid-connect",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "update User 1 with auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": false
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"firstName\": \"Newname\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/{{username1}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"{{username1}}"
					]
				},
				"description": "Update user with User ID supplied"
			},
			"response": []
		},
		{
			"name": "check user 1 updated",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Check first name updated correct\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.firstName).to.be.eq('Newname');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": false
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/user/{{username1}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"{{username1}}"
					]
				},
				"description": "Returns a user based on a single ID, if the user does not have access to the user"
			},
			"response": []
		},
		{
			"name": "Create user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": false
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"{{username2}}\",\n  \"password\": \"{{password2}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"phone\": \"{{$randomPhoneNumber}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user"
					]
				},
				"description": "This can only be done by the logged in user."
			},
			"response": []
		},
		{
			"name": "auth user 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.collectionVariables.set(\"refresh_token2\", jsonData.refresh_token);",
							"pm.collectionVariables.set(\"access_token2\", jsonData.access_token);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": false
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "{{username2}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{password2}}",
							"type": "text"
						},
						{
							"key": "client_id",
							"value": "account",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "password",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "any",
							"type": "text",
							"disabled": true
						},
						{
							"key": "scope",
							"value": "openid email profile",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{keycloakUrl}}/realms/{{realm}}/protocol/openid-connect/token",
					"host": [
						"{{keycloakUrl}}"
					],
					"path": [
						"realms",
						"{{realm}}",
						"protocol",
						"openid-connect",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "find user 1 by nickname with auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"  pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": false
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token2}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/user/{{username1}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"{{username1}}"
					]
				},
				"description": "Returns a user based on a single ID, if the user does not have access to the user"
			},
			"response": []
		},
		{
			"name": "update User 1 with auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": false
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token2}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"firstName\": \"{{$randomFirstName}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/{{username1}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"{{username1}}"
					]
				},
				"description": "Update user with User ID supplied"
			},
			"response": []
		},
		{
			"name": "delete User 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": false
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token2}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/user/{{username2}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"{{username2}}"
					]
				},
				"description": "deletes a single user based on the ID supplied"
			},
			"response": [
				{
					"name": "user deleted",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "-4093286",
									"description": "(Required) ID of user"
								}
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "unexpected error",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "-4093286",
									"description": "(Required) ID of user"
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"code\": 30550307,\n  \"message\": \"eu\"\n}"
				}
			]
		},
		{
			"name": "delete User 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": false
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/user/{{username1}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"{{username1}}"
					]
				},
				"description": "deletes a single user based on the ID supplied"
			},
			"response": [
				{
					"name": "user deleted",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "-4093286",
									"description": "(Required) ID of user"
								}
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "unexpected error",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "-4093286",
									"description": "(Required) ID of user"
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"code\": 30550307,\n  \"message\": \"eu\"\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost",
			"type": "string"
		},
		{
			"key": "username1",
			"value": "user.one",
			"type": "string"
		},
		{
			"key": "password1",
			"value": "password1",
			"type": "string"
		},
		{
			"key": "username2",
			"value": "user.two",
			"type": "string"
		},
		{
			"key": "password2",
			"value": "password2",
			"type": "string"
		},
		{
			"key": "keycloakUrl",
			"value": "http://keycloak.localhost",
			"type": "string"
		},
		{
			"key": "realm",
			"value": "otus",
			"type": "string"
		},
		{
			"key": "clientId",
			"value": "otus",
			"type": "string"
		},
		{
			"key": "baseUrl",
			"value": "http://127.0.0.1:8081",
			"type": "string",
			"disabled": true
		},
		{
			"key": "refresh_token",
			"value": ""
		},
		{
			"key": "access_token",
			"value": ""
		},
		{
			"key": "refresh_token2",
			"value": ""
		},
		{
			"key": "access_token2",
			"value": ""
		}
	]
}